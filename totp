#!/usr/bin/env perl
use strict;
use warnings;

use Convert::Base32 qw(decode_base32);
use Authen::OATH;

our $| = 1;

my $_TOTP = require "$ENV{HOME}/.totp/conf";
my %TOTP  = %$_TOTP;

MAIN : {
    my $arg = shift @ARGV;
    if (exists $TOTP{$arg or ''}) {
        my $secret = $TOTP{$arg}{'secret'};
        my $oath = Authen::OATH->new;
        my $timestep = $oath->timestep;
	#print "EXIT: Ctrl-c\n\n";
	#while (1) {
            my $otp = $oath->totp(decode_base32($secret));
            my $remain = sprintf("%02d", $timestep - (time() % $timestep));
            my $buf = "$arg: $otp (remain: $remain sec)";
            print "$buf\n";
	#    sleep 1;
	#    print "\b" x length($buf);
	#}
    } else {
        print join "\n", (
            "USER LIST",
            (join "\n", map { " - $_" } sort keys %TOTP),
            '',
            "HELP: `perldoc totp`",
            '',
            '',
        );
    }
}
1;

__END__

=encoding utf8

=head1 NAME

B<totp> - generate TOTP

=head1 SYNOPSIS

B<totp>
user

print user's password. NOT key.

B<totp>

list users

if you need to register TOTP key, write user and key mapping to %TOTP.

EXAMPLE: ~/.totp/conf

    +{
      'example1'  => +{ secret => 'SECRETXXXXXXXXXXXXXXXXX', description => 'hoge' },
      'example2'  => +{ secret => 'SECRETYYYYYYYYYYYYYYYYY', description => 'foo'  },
    }

=head1 DESCRIPTION

generate Time-based One-time Password

=cut

# for Emacsen
# Local Variables:
# mode: cperl
# cperl-indent-level: 4
# cperl-close-paren-offset: -4
# cperl-indent-parens-as-block: t
# indent-tabs-mode: nil
# coding: utf-8
# End:

# vi: set ts=4 sw=4 sts=0 et ft=perl fenc=utf-8 :
